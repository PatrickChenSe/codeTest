https://docs.google.com/document/d/1UgiAE5z3iWbAl-lDk-kDGYq7NzOMRAuA14TAg62zT6I/edit

最短路径
戴克斯特拉
贝尔曼-福特
Floyd-Warshall


最小生成树
普林姆
克鲁斯克尔

线性规划
单纯型法
Karmarkar

顺序统计量
选择算法
一种在列表或数组中找到第k个最小数字的算法；这样的数字被称为第k个顺序统计量。该算法寻找的对象主要有三种：最小、最大和中位数，其他子问题，最近邻和最短路径
最简单的都是遍历寻找，跟选择排序有关
最复杂的，都是中位数，必然要O(n/2)的空间，已知最好的选择算法是快速选择（quickselect），它与快速排序有关和快速排序类似，它有渐进最佳的复杂度，但是最坏情况的复杂度较差。不过这可以通过调整基准（pivot）的选择来优化


中位数的中位数

其他算法
近似算法
随机化算法

分治法
个解决复杂问题的好工具，它可以把问题分解成若干个子问题，把子问题逐个解决，再组合到一起形成大问题的答案
Karatsuba快速乘法算法、快速排序算法和并行算法、矩阵乘法的施特拉森算法、快速傅里叶变换, 归并排序
实现
在每一层递归上都有三个步骤：
分解：将原问题分解为若干个规模较小，相对独立，与原问题形式相同的子问题。
解决：若子问题规模较小且易于解决时，则直接解。否则，递归地解决各子问题。
合并：将各子问题的解合并为原问题的解。
分治的关键在于递归


贪心法
解决最优子结构，即最优子结构即使整体的解，与动态规划不同的是，每个子问题有解，不能回退，动态规划会保存以前的结果，并根据当前结果和以前结果比较，可以回退
建立数学模型来描述问题。
把求解的问题分成若干个子问题。
对每一子问题求解，得到子问题的局部最优解。
把子问题的解局部最优解合成原来解问题的一个解。
从问题的某一初始解出发；while 能朝给定总目标前进一步 do，求出可行解的一个解元素；最后，由所有解元素组合成问题的一个可行解。





双指针
https://hk029.gitbooks.io/leetbook/content/twopoint.html
一般数组问题的求解
头尾两个指针，移动到交叉之后停止, O(n)
一般双指针在有序数组中使用的特别多
解决的问题:
两数求和，时间复杂度为O(n),如果用双重循环则要O(n^2)
inplace 交换，数组的in place(就地)交换一般得用双指针，不然数组中添加或删除一个元素，需要移动大量元素。这时候，一般是一个指针遍历，一个指针去找可以用来交换的元素



